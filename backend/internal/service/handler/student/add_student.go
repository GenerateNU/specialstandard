package student

import (
	"github.com/gofiber/fiber/v2"
	"specialstandard/internal/models"
	"time"
	"github.com/google/uuid"
)

func (h *Handler) AddStudent(c *fiber.Ctx) error {
	var req models.CreateStudentInput
	
	if err := c.BodyParser(&req); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid JSON format",
		})
	}
	
	// Validate required fields
	if req.FirstName == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "First name is required",
		})
	}
	if req.LastName == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Last name is required",
		})
	}
	if req.TherapistID == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Therapist ID is required",
		})
	}
	
	// Parse therapist UUID (but don't validate existence - let database handle it)
	therapistID, err := uuid.Parse(req.TherapistID)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid therapist ID format",
		})
	}

	// Parse optional DOB
	var dob *time.Time
	if req.DOB != nil && *req.DOB != "" {
		parsedDOB, err := time.Parse("2006-01-02", *req.DOB)
		if err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error": "Invalid date format. Use YYYY-MM-DD",
			})
		}
		dob = &parsedDOB
	}

	student := models.Student{
		// ID will be generated by database (removed uuid.New())
		FirstName:   req.FirstName,
		LastName:    req.LastName,
		DOB:         dob,
		TherapistID: therapistID,
		Grade:       req.Grade,
		IEP:         req.IEP,
	}
	
	createdStudent, err := h.studentRepository.AddStudent(c.Context(), student)
	if err != nil {
		// Database will catch invalid therapist_id foreign key violations
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "Database error",
		})
	}
	
	return c.Status(fiber.StatusCreated).JSON(createdStudent)
}