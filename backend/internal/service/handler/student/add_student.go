package student

import (
	"specialstandard/internal/errs"
	"specialstandard/internal/models"
	"specialstandard/internal/xvalidator"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/google/uuid"
)

func (h *Handler) AddStudent(c *fiber.Ctx) error {
	var req models.CreateStudentInput

	if err := c.BodyParser(&req); err != nil {
		return errs.InvalidJSON("Invalid JSON format")
	}

	// Validate using xvalidator
	if validationErrors := xvalidator.Validator.Validate(req); len(validationErrors) > 0 {
		return errs.InvalidRequestData(xvalidator.ConvertToMessages(validationErrors))
	}

	// Parse therapist UUID
	therapistID, err := uuid.Parse(req.TherapistID)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid therapist ID format",
		})
	}

	// Parse optional DOB
	var dob *time.Time
	if req.DOB != nil && *req.DOB != "" {
		parsedDOB, err := time.Parse("2006-01-02", *req.DOB)
		if err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error": "Invalid date format. Use YYYY-MM-DD",
			})
		}
		dob = &parsedDOB
	}

	student := models.Student{
		// ID will be generated by database (removed uuid.New())
		FirstName:   req.FirstName,
		LastName:    req.LastName,
		DOB:         dob,
		TherapistID: therapistID,
		Grade:       req.Grade, // Now *int as expected by the model
		IEP:         req.IEP,
	}

	createdStudent, err := h.studentRepository.AddStudent(c.Context(), student)
	if err != nil {
		// Database will catch invalid therapist_id foreign key violations
		return errs.InternalServerError("Database error")
	}

	return c.Status(fiber.StatusCreated).JSON(createdStudent)
}
