// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"specialstandard/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionStudentRepository creates a new instance of MockSessionStudentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStudentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionStudentRepository {
	mock := &MockSessionStudentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionStudentRepository is an autogenerated mock type for the SessionStudentRepository type
type MockSessionStudentRepository struct {
	mock.Mock
}

type MockSessionStudentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionStudentRepository) EXPECT() *MockSessionStudentRepository_Expecter {
	return &MockSessionStudentRepository_Expecter{mock: &_m.Mock}
}

// CreateSessionStudent provides a mock function for the type MockSessionStudentRepository
func (_mock *MockSessionStudentRepository) CreateSessionStudent(ctx context.Context, input *models.CreateSessionStudentInput) (*models.SessionStudent, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateSessionStudent")
	}

	var r0 *models.SessionStudent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateSessionStudentInput) (*models.SessionStudent, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateSessionStudentInput) *models.SessionStudent); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SessionStudent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.CreateSessionStudentInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStudentRepository_CreateSessionStudent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSessionStudent'
type MockSessionStudentRepository_CreateSessionStudent_Call struct {
	*mock.Call
}

// CreateSessionStudent is a helper method to define mock.On call
//   - ctx context.Context
//   - input *models.CreateSessionStudentInput
func (_e *MockSessionStudentRepository_Expecter) CreateSessionStudent(ctx interface{}, input interface{}) *MockSessionStudentRepository_CreateSessionStudent_Call {
	return &MockSessionStudentRepository_CreateSessionStudent_Call{Call: _e.mock.On("CreateSessionStudent", ctx, input)}
}

func (_c *MockSessionStudentRepository_CreateSessionStudent_Call) Run(run func(ctx context.Context, input *models.CreateSessionStudentInput)) *MockSessionStudentRepository_CreateSessionStudent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.CreateSessionStudentInput
		if args[1] != nil {
			arg1 = args[1].(*models.CreateSessionStudentInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionStudentRepository_CreateSessionStudent_Call) Return(sessionStudent *models.SessionStudent, err error) *MockSessionStudentRepository_CreateSessionStudent_Call {
	_c.Call.Return(sessionStudent, err)
	return _c
}

func (_c *MockSessionStudentRepository_CreateSessionStudent_Call) RunAndReturn(run func(ctx context.Context, input *models.CreateSessionStudentInput) (*models.SessionStudent, error)) *MockSessionStudentRepository_CreateSessionStudent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSessionStudent provides a mock function for the type MockSessionStudentRepository
func (_mock *MockSessionStudentRepository) DeleteSessionStudent(ctx context.Context, input *models.DeleteSessionStudentInput) error {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSessionStudent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.DeleteSessionStudentInput) error); ok {
		r0 = returnFunc(ctx, input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionStudentRepository_DeleteSessionStudent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSessionStudent'
type MockSessionStudentRepository_DeleteSessionStudent_Call struct {
	*mock.Call
}

// DeleteSessionStudent is a helper method to define mock.On call
//   - ctx context.Context
//   - input *models.DeleteSessionStudentInput
func (_e *MockSessionStudentRepository_Expecter) DeleteSessionStudent(ctx interface{}, input interface{}) *MockSessionStudentRepository_DeleteSessionStudent_Call {
	return &MockSessionStudentRepository_DeleteSessionStudent_Call{Call: _e.mock.On("DeleteSessionStudent", ctx, input)}
}

func (_c *MockSessionStudentRepository_DeleteSessionStudent_Call) Run(run func(ctx context.Context, input *models.DeleteSessionStudentInput)) *MockSessionStudentRepository_DeleteSessionStudent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.DeleteSessionStudentInput
		if args[1] != nil {
			arg1 = args[1].(*models.DeleteSessionStudentInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionStudentRepository_DeleteSessionStudent_Call) Return(err error) *MockSessionStudentRepository_DeleteSessionStudent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionStudentRepository_DeleteSessionStudent_Call) RunAndReturn(run func(ctx context.Context, input *models.DeleteSessionStudentInput) error) *MockSessionStudentRepository_DeleteSessionStudent_Call {
	_c.Call.Return(run)
	return _c
}

// PatchSessionStudent provides a mock function for the type MockSessionStudentRepository
func (_mock *MockSessionStudentRepository) PatchSessionStudent(ctx context.Context, input *models.PatchSessionStudentInput) (*models.SessionStudent, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for PatchSessionStudent")
	}

	var r0 *models.SessionStudent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.PatchSessionStudentInput) (*models.SessionStudent, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.PatchSessionStudentInput) *models.SessionStudent); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SessionStudent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.PatchSessionStudentInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStudentRepository_PatchSessionStudent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchSessionStudent'
type MockSessionStudentRepository_PatchSessionStudent_Call struct {
	*mock.Call
}

// PatchSessionStudent is a helper method to define mock.On call
//   - ctx context.Context
//   - input *models.PatchSessionStudentInput
func (_e *MockSessionStudentRepository_Expecter) PatchSessionStudent(ctx interface{}, input interface{}) *MockSessionStudentRepository_PatchSessionStudent_Call {
	return &MockSessionStudentRepository_PatchSessionStudent_Call{Call: _e.mock.On("PatchSessionStudent", ctx, input)}
}

func (_c *MockSessionStudentRepository_PatchSessionStudent_Call) Run(run func(ctx context.Context, input *models.PatchSessionStudentInput)) *MockSessionStudentRepository_PatchSessionStudent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.PatchSessionStudentInput
		if args[1] != nil {
			arg1 = args[1].(*models.PatchSessionStudentInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionStudentRepository_PatchSessionStudent_Call) Return(sessionStudent *models.SessionStudent, err error) *MockSessionStudentRepository_PatchSessionStudent_Call {
	_c.Call.Return(sessionStudent, err)
	return _c
}

func (_c *MockSessionStudentRepository_PatchSessionStudent_Call) RunAndReturn(run func(ctx context.Context, input *models.PatchSessionStudentInput) (*models.SessionStudent, error)) *MockSessionStudentRepository_PatchSessionStudent_Call {
	_c.Call.Return(run)
	return _c
}
