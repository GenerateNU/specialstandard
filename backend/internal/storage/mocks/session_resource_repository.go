// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"specialstandard/internal/models"
	"specialstandard/internal/utils"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionResourceRepository creates a new instance of MockSessionResourceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionResourceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionResourceRepository {
	mock := &MockSessionResourceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionResourceRepository is an autogenerated mock type for the SessionResourceRepository type
type MockSessionResourceRepository struct {
	mock.Mock
}

type MockSessionResourceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionResourceRepository) EXPECT() *MockSessionResourceRepository_Expecter {
	return &MockSessionResourceRepository_Expecter{mock: &_m.Mock}
}

// DeleteSessionResource provides a mock function for the type MockSessionResourceRepository
func (_mock *MockSessionResourceRepository) DeleteSessionResource(ctx context.Context, sessionResource models.DeleteSessionResource) error {
	ret := _mock.Called(ctx, sessionResource)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSessionResource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.DeleteSessionResource) error); ok {
		r0 = returnFunc(ctx, sessionResource)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionResourceRepository_DeleteSessionResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSessionResource'
type MockSessionResourceRepository_DeleteSessionResource_Call struct {
	*mock.Call
}

// DeleteSessionResource is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionResource models.DeleteSessionResource
func (_e *MockSessionResourceRepository_Expecter) DeleteSessionResource(ctx interface{}, sessionResource interface{}) *MockSessionResourceRepository_DeleteSessionResource_Call {
	return &MockSessionResourceRepository_DeleteSessionResource_Call{Call: _e.mock.On("DeleteSessionResource", ctx, sessionResource)}
}

func (_c *MockSessionResourceRepository_DeleteSessionResource_Call) Run(run func(ctx context.Context, sessionResource models.DeleteSessionResource)) *MockSessionResourceRepository_DeleteSessionResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.DeleteSessionResource
		if args[1] != nil {
			arg1 = args[1].(models.DeleteSessionResource)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionResourceRepository_DeleteSessionResource_Call) Return(err error) *MockSessionResourceRepository_DeleteSessionResource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionResourceRepository_DeleteSessionResource_Call) RunAndReturn(run func(ctx context.Context, sessionResource models.DeleteSessionResource) error) *MockSessionResourceRepository_DeleteSessionResource_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcesBySessionID provides a mock function for the type MockSessionResourceRepository
func (_mock *MockSessionResourceRepository) GetResourcesBySessionID(ctx context.Context, sessionID uuid.UUID, pagination utils.Pagination) ([]models.Resource, error) {
	ret := _mock.Called(ctx, sessionID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesBySessionID")
	}

	var r0 []models.Resource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, utils.Pagination) ([]models.Resource, error)); ok {
		return returnFunc(ctx, sessionID, pagination)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, utils.Pagination) []models.Resource); ok {
		r0 = returnFunc(ctx, sessionID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Resource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, utils.Pagination) error); ok {
		r1 = returnFunc(ctx, sessionID, pagination)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionResourceRepository_GetResourcesBySessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesBySessionID'
type MockSessionResourceRepository_GetResourcesBySessionID_Call struct {
	*mock.Call
}

// GetResourcesBySessionID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
//   - pagination utils.Pagination
func (_e *MockSessionResourceRepository_Expecter) GetResourcesBySessionID(ctx interface{}, sessionID interface{}, pagination interface{}) *MockSessionResourceRepository_GetResourcesBySessionID_Call {
	return &MockSessionResourceRepository_GetResourcesBySessionID_Call{Call: _e.mock.On("GetResourcesBySessionID", ctx, sessionID, pagination)}
}

func (_c *MockSessionResourceRepository_GetResourcesBySessionID_Call) Run(run func(ctx context.Context, sessionID uuid.UUID, pagination utils.Pagination)) *MockSessionResourceRepository_GetResourcesBySessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 utils.Pagination
		if args[2] != nil {
			arg2 = args[2].(utils.Pagination)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionResourceRepository_GetResourcesBySessionID_Call) Return(resources []models.Resource, err error) *MockSessionResourceRepository_GetResourcesBySessionID_Call {
	_c.Call.Return(resources, err)
	return _c
}

func (_c *MockSessionResourceRepository_GetResourcesBySessionID_Call) RunAndReturn(run func(ctx context.Context, sessionID uuid.UUID, pagination utils.Pagination) ([]models.Resource, error)) *MockSessionResourceRepository_GetResourcesBySessionID_Call {
	_c.Call.Return(run)
	return _c
}

// PostSessionResource provides a mock function for the type MockSessionResourceRepository
func (_mock *MockSessionResourceRepository) PostSessionResource(ctx context.Context, sessionResource models.CreateSessionResource) (*models.SessionResource, error) {
	ret := _mock.Called(ctx, sessionResource)

	if len(ret) == 0 {
		panic("no return value specified for PostSessionResource")
	}

	var r0 *models.SessionResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.CreateSessionResource) (*models.SessionResource, error)); ok {
		return returnFunc(ctx, sessionResource)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.CreateSessionResource) *models.SessionResource); ok {
		r0 = returnFunc(ctx, sessionResource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SessionResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.CreateSessionResource) error); ok {
		r1 = returnFunc(ctx, sessionResource)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionResourceRepository_PostSessionResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSessionResource'
type MockSessionResourceRepository_PostSessionResource_Call struct {
	*mock.Call
}

// PostSessionResource is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionResource models.CreateSessionResource
func (_e *MockSessionResourceRepository_Expecter) PostSessionResource(ctx interface{}, sessionResource interface{}) *MockSessionResourceRepository_PostSessionResource_Call {
	return &MockSessionResourceRepository_PostSessionResource_Call{Call: _e.mock.On("PostSessionResource", ctx, sessionResource)}
}

func (_c *MockSessionResourceRepository_PostSessionResource_Call) Run(run func(ctx context.Context, sessionResource models.CreateSessionResource)) *MockSessionResourceRepository_PostSessionResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.CreateSessionResource
		if args[1] != nil {
			arg1 = args[1].(models.CreateSessionResource)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionResourceRepository_PostSessionResource_Call) Return(sessionResource1 *models.SessionResource, err error) *MockSessionResourceRepository_PostSessionResource_Call {
	_c.Call.Return(sessionResource1, err)
	return _c
}

func (_c *MockSessionResourceRepository_PostSessionResource_Call) RunAndReturn(run func(ctx context.Context, sessionResource models.CreateSessionResource) (*models.SessionResource, error)) *MockSessionResourceRepository_PostSessionResource_Call {
	_c.Call.Return(run)
	return _c
}
