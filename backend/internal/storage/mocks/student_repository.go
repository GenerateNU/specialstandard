// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"specialstandard/internal/models"
	"specialstandard/internal/utils"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStudentRepository creates a new instance of MockStudentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStudentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStudentRepository {
	mock := &MockStudentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStudentRepository is an autogenerated mock type for the StudentRepository type
type MockStudentRepository struct {
	mock.Mock
}

type MockStudentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStudentRepository) EXPECT() *MockStudentRepository_Expecter {
	return &MockStudentRepository_Expecter{mock: &_m.Mock}
}

// AddStudent provides a mock function for the type MockStudentRepository
func (_mock *MockStudentRepository) AddStudent(ctx context.Context, student models.Student) (models.Student, error) {
	ret := _mock.Called(ctx, student)

	if len(ret) == 0 {
		panic("no return value specified for AddStudent")
	}

	var r0 models.Student
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Student) (models.Student, error)); ok {
		return returnFunc(ctx, student)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Student) models.Student); ok {
		r0 = returnFunc(ctx, student)
	} else {
		r0 = ret.Get(0).(models.Student)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Student) error); ok {
		r1 = returnFunc(ctx, student)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStudentRepository_AddStudent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStudent'
type MockStudentRepository_AddStudent_Call struct {
	*mock.Call
}

// AddStudent is a helper method to define mock.On call
//   - ctx context.Context
//   - student models.Student
func (_e *MockStudentRepository_Expecter) AddStudent(ctx interface{}, student interface{}) *MockStudentRepository_AddStudent_Call {
	return &MockStudentRepository_AddStudent_Call{Call: _e.mock.On("AddStudent", ctx, student)}
}

func (_c *MockStudentRepository_AddStudent_Call) Run(run func(ctx context.Context, student models.Student)) *MockStudentRepository_AddStudent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.Student
		if args[1] != nil {
			arg1 = args[1].(models.Student)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStudentRepository_AddStudent_Call) Return(student1 models.Student, err error) *MockStudentRepository_AddStudent_Call {
	_c.Call.Return(student1, err)
	return _c
}

func (_c *MockStudentRepository_AddStudent_Call) RunAndReturn(run func(ctx context.Context, student models.Student) (models.Student, error)) *MockStudentRepository_AddStudent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStudent provides a mock function for the type MockStudentRepository
func (_mock *MockStudentRepository) DeleteStudent(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStudent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStudentRepository_DeleteStudent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStudent'
type MockStudentRepository_DeleteStudent_Call struct {
	*mock.Call
}

// DeleteStudent is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStudentRepository_Expecter) DeleteStudent(ctx interface{}, id interface{}) *MockStudentRepository_DeleteStudent_Call {
	return &MockStudentRepository_DeleteStudent_Call{Call: _e.mock.On("DeleteStudent", ctx, id)}
}

func (_c *MockStudentRepository_DeleteStudent_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStudentRepository_DeleteStudent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStudentRepository_DeleteStudent_Call) Return(err error) *MockStudentRepository_DeleteStudent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStudentRepository_DeleteStudent_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockStudentRepository_DeleteStudent_Call {
	_c.Call.Return(run)
	return _c
}

// GetStudent provides a mock function for the type MockStudentRepository
func (_mock *MockStudentRepository) GetStudent(ctx context.Context, id uuid.UUID) (models.Student, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStudent")
	}

	var r0 models.Student
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Student, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Student); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Student)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStudentRepository_GetStudent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStudent'
type MockStudentRepository_GetStudent_Call struct {
	*mock.Call
}

// GetStudent is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStudentRepository_Expecter) GetStudent(ctx interface{}, id interface{}) *MockStudentRepository_GetStudent_Call {
	return &MockStudentRepository_GetStudent_Call{Call: _e.mock.On("GetStudent", ctx, id)}
}

func (_c *MockStudentRepository_GetStudent_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStudentRepository_GetStudent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStudentRepository_GetStudent_Call) Return(student models.Student, err error) *MockStudentRepository_GetStudent_Call {
	_c.Call.Return(student, err)
	return _c
}

func (_c *MockStudentRepository_GetStudent_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (models.Student, error)) *MockStudentRepository_GetStudent_Call {
	_c.Call.Return(run)
	return _c
}

// GetStudentSessions provides a mock function for the type MockStudentRepository
func (_mock *MockStudentRepository) GetStudentSessions(ctx context.Context, studentID uuid.UUID, pagination utils.Pagination) ([]models.StudentSessionsOutput, error) {
	ret := _mock.Called(ctx, studentID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetStudentSessions")
	}

	var r0 []models.StudentSessionsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, utils.Pagination) ([]models.StudentSessionsOutput, error)); ok {
		return returnFunc(ctx, studentID, pagination)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, utils.Pagination) []models.StudentSessionsOutput); ok {
		r0 = returnFunc(ctx, studentID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StudentSessionsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, utils.Pagination) error); ok {
		r1 = returnFunc(ctx, studentID, pagination)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStudentRepository_GetStudentSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStudentSessions'
type MockStudentRepository_GetStudentSessions_Call struct {
	*mock.Call
}

// GetStudentSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - studentID uuid.UUID
//   - pagination utils.Pagination
func (_e *MockStudentRepository_Expecter) GetStudentSessions(ctx interface{}, studentID interface{}, pagination interface{}) *MockStudentRepository_GetStudentSessions_Call {
	return &MockStudentRepository_GetStudentSessions_Call{Call: _e.mock.On("GetStudentSessions", ctx, studentID, pagination)}
}

func (_c *MockStudentRepository_GetStudentSessions_Call) Run(run func(ctx context.Context, studentID uuid.UUID, pagination utils.Pagination)) *MockStudentRepository_GetStudentSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 utils.Pagination
		if args[2] != nil {
			arg2 = args[2].(utils.Pagination)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStudentRepository_GetStudentSessions_Call) Return(studentSessionsOutputs []models.StudentSessionsOutput, err error) *MockStudentRepository_GetStudentSessions_Call {
	_c.Call.Return(studentSessionsOutputs, err)
	return _c
}

func (_c *MockStudentRepository_GetStudentSessions_Call) RunAndReturn(run func(ctx context.Context, studentID uuid.UUID, pagination utils.Pagination) ([]models.StudentSessionsOutput, error)) *MockStudentRepository_GetStudentSessions_Call {
	_c.Call.Return(run)
	return _c
}

// GetStudents provides a mock function for the type MockStudentRepository
func (_mock *MockStudentRepository) GetStudents(ctx context.Context, grade *int, therapistID uuid.UUID, name string, pagination utils.Pagination) ([]models.Student, error) {
	ret := _mock.Called(ctx, grade, therapistID, name, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetStudents")
	}

	var r0 []models.Student
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int, uuid.UUID, string, utils.Pagination) ([]models.Student, error)); ok {
		return returnFunc(ctx, grade, therapistID, name, pagination)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int, uuid.UUID, string, utils.Pagination) []models.Student); ok {
		r0 = returnFunc(ctx, grade, therapistID, name, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Student)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int, uuid.UUID, string, utils.Pagination) error); ok {
		r1 = returnFunc(ctx, grade, therapistID, name, pagination)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStudentRepository_GetStudents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStudents'
type MockStudentRepository_GetStudents_Call struct {
	*mock.Call
}

// GetStudents is a helper method to define mock.On call
//   - ctx context.Context
//   - grade *int
//   - therapistID uuid.UUID
//   - name string
//   - pagination utils.Pagination
func (_e *MockStudentRepository_Expecter) GetStudents(ctx interface{}, grade interface{}, therapistID interface{}, name interface{}, pagination interface{}) *MockStudentRepository_GetStudents_Call {
	return &MockStudentRepository_GetStudents_Call{Call: _e.mock.On("GetStudents", ctx, grade, therapistID, name, pagination)}
}

func (_c *MockStudentRepository_GetStudents_Call) Run(run func(ctx context.Context, grade *int, therapistID uuid.UUID, name string, pagination utils.Pagination)) *MockStudentRepository_GetStudents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int
		if args[1] != nil {
			arg1 = args[1].(*int)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 utils.Pagination
		if args[4] != nil {
			arg4 = args[4].(utils.Pagination)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockStudentRepository_GetStudents_Call) Return(students []models.Student, err error) *MockStudentRepository_GetStudents_Call {
	_c.Call.Return(students, err)
	return _c
}

func (_c *MockStudentRepository_GetStudents_Call) RunAndReturn(run func(ctx context.Context, grade *int, therapistID uuid.UUID, name string, pagination utils.Pagination) ([]models.Student, error)) *MockStudentRepository_GetStudents_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStudent provides a mock function for the type MockStudentRepository
func (_mock *MockStudentRepository) UpdateStudent(ctx context.Context, student models.Student) (models.Student, error) {
	ret := _mock.Called(ctx, student)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStudent")
	}

	var r0 models.Student
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Student) (models.Student, error)); ok {
		return returnFunc(ctx, student)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Student) models.Student); ok {
		r0 = returnFunc(ctx, student)
	} else {
		r0 = ret.Get(0).(models.Student)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Student) error); ok {
		r1 = returnFunc(ctx, student)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStudentRepository_UpdateStudent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStudent'
type MockStudentRepository_UpdateStudent_Call struct {
	*mock.Call
}

// UpdateStudent is a helper method to define mock.On call
//   - ctx context.Context
//   - student models.Student
func (_e *MockStudentRepository_Expecter) UpdateStudent(ctx interface{}, student interface{}) *MockStudentRepository_UpdateStudent_Call {
	return &MockStudentRepository_UpdateStudent_Call{Call: _e.mock.On("UpdateStudent", ctx, student)}
}

func (_c *MockStudentRepository_UpdateStudent_Call) Run(run func(ctx context.Context, student models.Student)) *MockStudentRepository_UpdateStudent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.Student
		if args[1] != nil {
			arg1 = args[1].(models.Student)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStudentRepository_UpdateStudent_Call) Return(student1 models.Student, err error) *MockStudentRepository_UpdateStudent_Call {
	_c.Call.Return(student1, err)
	return _c
}

func (_c *MockStudentRepository_UpdateStudent_Call) RunAndReturn(run func(ctx context.Context, student models.Student) (models.Student, error)) *MockStudentRepository_UpdateStudent_Call {
	_c.Call.Return(run)
	return _c
}
