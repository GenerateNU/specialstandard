// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"specialstandard/internal/models"
	"specialstandard/internal/utils"
	"time"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockResourceRepository creates a new instance of MockResourceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceRepository {
	mock := &MockResourceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResourceRepository is an autogenerated mock type for the ResourceRepository type
type MockResourceRepository struct {
	mock.Mock
}

type MockResourceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceRepository) EXPECT() *MockResourceRepository_Expecter {
	return &MockResourceRepository_Expecter{mock: &_m.Mock}
}

// CreateResource provides a mock function for the type MockResourceRepository
func (_mock *MockResourceRepository) CreateResource(ctx context.Context, resourceBody models.ResourceBody) (*models.Resource, error) {
	ret := _mock.Called(ctx, resourceBody)

	if len(ret) == 0 {
		panic("no return value specified for CreateResource")
	}

	var r0 *models.Resource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.ResourceBody) (*models.Resource, error)); ok {
		return returnFunc(ctx, resourceBody)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.ResourceBody) *models.Resource); ok {
		r0 = returnFunc(ctx, resourceBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Resource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.ResourceBody) error); ok {
		r1 = returnFunc(ctx, resourceBody)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceRepository_CreateResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResource'
type MockResourceRepository_CreateResource_Call struct {
	*mock.Call
}

// CreateResource is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceBody models.ResourceBody
func (_e *MockResourceRepository_Expecter) CreateResource(ctx interface{}, resourceBody interface{}) *MockResourceRepository_CreateResource_Call {
	return &MockResourceRepository_CreateResource_Call{Call: _e.mock.On("CreateResource", ctx, resourceBody)}
}

func (_c *MockResourceRepository_CreateResource_Call) Run(run func(ctx context.Context, resourceBody models.ResourceBody)) *MockResourceRepository_CreateResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.ResourceBody
		if args[1] != nil {
			arg1 = args[1].(models.ResourceBody)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockResourceRepository_CreateResource_Call) Return(resource *models.Resource, err error) *MockResourceRepository_CreateResource_Call {
	_c.Call.Return(resource, err)
	return _c
}

func (_c *MockResourceRepository_CreateResource_Call) RunAndReturn(run func(ctx context.Context, resourceBody models.ResourceBody) (*models.Resource, error)) *MockResourceRepository_CreateResource_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResource provides a mock function for the type MockResourceRepository
func (_mock *MockResourceRepository) DeleteResource(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceRepository_DeleteResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResource'
type MockResourceRepository_DeleteResource_Call struct {
	*mock.Call
}

// DeleteResource is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockResourceRepository_Expecter) DeleteResource(ctx interface{}, id interface{}) *MockResourceRepository_DeleteResource_Call {
	return &MockResourceRepository_DeleteResource_Call{Call: _e.mock.On("DeleteResource", ctx, id)}
}

func (_c *MockResourceRepository_DeleteResource_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockResourceRepository_DeleteResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockResourceRepository_DeleteResource_Call) Return(err error) *MockResourceRepository_DeleteResource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceRepository_DeleteResource_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockResourceRepository_DeleteResource_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceByID provides a mock function for the type MockResourceRepository
func (_mock *MockResourceRepository) GetResourceByID(ctx context.Context, id uuid.UUID) (*models.ResourceWithTheme, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceByID")
	}

	var r0 *models.ResourceWithTheme
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.ResourceWithTheme, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.ResourceWithTheme); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceWithTheme)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceRepository_GetResourceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceByID'
type MockResourceRepository_GetResourceByID_Call struct {
	*mock.Call
}

// GetResourceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockResourceRepository_Expecter) GetResourceByID(ctx interface{}, id interface{}) *MockResourceRepository_GetResourceByID_Call {
	return &MockResourceRepository_GetResourceByID_Call{Call: _e.mock.On("GetResourceByID", ctx, id)}
}

func (_c *MockResourceRepository_GetResourceByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockResourceRepository_GetResourceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockResourceRepository_GetResourceByID_Call) Return(resourceWithTheme *models.ResourceWithTheme, err error) *MockResourceRepository_GetResourceByID_Call {
	_c.Call.Return(resourceWithTheme, err)
	return _c
}

func (_c *MockResourceRepository_GetResourceByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.ResourceWithTheme, error)) *MockResourceRepository_GetResourceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetResources provides a mock function for the type MockResourceRepository
func (_mock *MockResourceRepository) GetResources(ctx context.Context, themeID uuid.UUID, gradeLevel string, resType string, title string, category string, content string, themeName string, date *time.Time, themeMonth *int, themeYear *int, pagination utils.Pagination) ([]models.ResourceWithTheme, error) {
	ret := _mock.Called(ctx, themeID, gradeLevel, resType, title, category, content, themeName, date, themeMonth, themeYear, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 []models.ResourceWithTheme
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string, string, string, string, *time.Time, *int, *int, utils.Pagination) ([]models.ResourceWithTheme, error)); ok {
		return returnFunc(ctx, themeID, gradeLevel, resType, title, category, content, themeName, date, themeMonth, themeYear, pagination)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string, string, string, string, *time.Time, *int, *int, utils.Pagination) []models.ResourceWithTheme); ok {
		r0 = returnFunc(ctx, themeID, gradeLevel, resType, title, category, content, themeName, date, themeMonth, themeYear, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceWithTheme)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, string, string, string, string, *time.Time, *int, *int, utils.Pagination) error); ok {
		r1 = returnFunc(ctx, themeID, gradeLevel, resType, title, category, content, themeName, date, themeMonth, themeYear, pagination)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceRepository_GetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResources'
type MockResourceRepository_GetResources_Call struct {
	*mock.Call
}

// GetResources is a helper method to define mock.On call
//   - ctx context.Context
//   - themeID uuid.UUID
//   - gradeLevel string
//   - resType string
//   - title string
//   - category string
//   - content string
//   - themeName string
//   - date *time.Time
//   - themeMonth *int
//   - themeYear *int
//   - pagination utils.Pagination
func (_e *MockResourceRepository_Expecter) GetResources(ctx interface{}, themeID interface{}, gradeLevel interface{}, resType interface{}, title interface{}, category interface{}, content interface{}, themeName interface{}, date interface{}, themeMonth interface{}, themeYear interface{}, pagination interface{}) *MockResourceRepository_GetResources_Call {
	return &MockResourceRepository_GetResources_Call{Call: _e.mock.On("GetResources", ctx, themeID, gradeLevel, resType, title, category, content, themeName, date, themeMonth, themeYear, pagination)}
}

func (_c *MockResourceRepository_GetResources_Call) Run(run func(ctx context.Context, themeID uuid.UUID, gradeLevel string, resType string, title string, category string, content string, themeName string, date *time.Time, themeMonth *int, themeYear *int, pagination utils.Pagination)) *MockResourceRepository_GetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		var arg7 string
		if args[7] != nil {
			arg7 = args[7].(string)
		}
		var arg8 *time.Time
		if args[8] != nil {
			arg8 = args[8].(*time.Time)
		}
		var arg9 *int
		if args[9] != nil {
			arg9 = args[9].(*int)
		}
		var arg10 *int
		if args[10] != nil {
			arg10 = args[10].(*int)
		}
		var arg11 utils.Pagination
		if args[11] != nil {
			arg11 = args[11].(utils.Pagination)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
			arg9,
			arg10,
			arg11,
		)
	})
	return _c
}

func (_c *MockResourceRepository_GetResources_Call) Return(resourceWithThemes []models.ResourceWithTheme, err error) *MockResourceRepository_GetResources_Call {
	_c.Call.Return(resourceWithThemes, err)
	return _c
}

func (_c *MockResourceRepository_GetResources_Call) RunAndReturn(run func(ctx context.Context, themeID uuid.UUID, gradeLevel string, resType string, title string, category string, content string, themeName string, date *time.Time, themeMonth *int, themeYear *int, pagination utils.Pagination) ([]models.ResourceWithTheme, error)) *MockResourceRepository_GetResources_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateResource provides a mock function for the type MockResourceRepository
func (_mock *MockResourceRepository) UpdateResource(ctx context.Context, id uuid.UUID, resourceBody models.UpdateResourceBody) (*models.Resource, error) {
	ret := _mock.Called(ctx, id, resourceBody)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResource")
	}

	var r0 *models.Resource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UpdateResourceBody) (*models.Resource, error)); ok {
		return returnFunc(ctx, id, resourceBody)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UpdateResourceBody) *models.Resource); ok {
		r0 = returnFunc(ctx, id, resourceBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Resource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.UpdateResourceBody) error); ok {
		r1 = returnFunc(ctx, id, resourceBody)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceRepository_UpdateResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateResource'
type MockResourceRepository_UpdateResource_Call struct {
	*mock.Call
}

// UpdateResource is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - resourceBody models.UpdateResourceBody
func (_e *MockResourceRepository_Expecter) UpdateResource(ctx interface{}, id interface{}, resourceBody interface{}) *MockResourceRepository_UpdateResource_Call {
	return &MockResourceRepository_UpdateResource_Call{Call: _e.mock.On("UpdateResource", ctx, id, resourceBody)}
}

func (_c *MockResourceRepository_UpdateResource_Call) Run(run func(ctx context.Context, id uuid.UUID, resourceBody models.UpdateResourceBody)) *MockResourceRepository_UpdateResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 models.UpdateResourceBody
		if args[2] != nil {
			arg2 = args[2].(models.UpdateResourceBody)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockResourceRepository_UpdateResource_Call) Return(resource *models.Resource, err error) *MockResourceRepository_UpdateResource_Call {
	_c.Call.Return(resource, err)
	return _c
}

func (_c *MockResourceRepository_UpdateResource_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, resourceBody models.UpdateResourceBody) (*models.Resource, error)) *MockResourceRepository_UpdateResource_Call {
	_c.Call.Return(run)
	return _c
}
