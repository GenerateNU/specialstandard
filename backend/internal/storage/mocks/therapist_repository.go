// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"specialstandard/internal/models"
	"specialstandard/internal/utils"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTherapistRepository creates a new instance of MockTherapistRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTherapistRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTherapistRepository {
	mock := &MockTherapistRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTherapistRepository is an autogenerated mock type for the TherapistRepository type
type MockTherapistRepository struct {
	mock.Mock
}

type MockTherapistRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTherapistRepository) EXPECT() *MockTherapistRepository_Expecter {
	return &MockTherapistRepository_Expecter{mock: &_m.Mock}
}

// CreateTherapist provides a mock function for the type MockTherapistRepository
func (_mock *MockTherapistRepository) CreateTherapist(ctx context.Context, therapist *models.CreateTherapistInput) (*models.Therapist, error) {
	ret := _mock.Called(ctx, therapist)

	if len(ret) == 0 {
		panic("no return value specified for CreateTherapist")
	}

	var r0 *models.Therapist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateTherapistInput) (*models.Therapist, error)); ok {
		return returnFunc(ctx, therapist)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateTherapistInput) *models.Therapist); ok {
		r0 = returnFunc(ctx, therapist)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Therapist)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.CreateTherapistInput) error); ok {
		r1 = returnFunc(ctx, therapist)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTherapistRepository_CreateTherapist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTherapist'
type MockTherapistRepository_CreateTherapist_Call struct {
	*mock.Call
}

// CreateTherapist is a helper method to define mock.On call
//   - ctx context.Context
//   - therapist *models.CreateTherapistInput
func (_e *MockTherapistRepository_Expecter) CreateTherapist(ctx interface{}, therapist interface{}) *MockTherapistRepository_CreateTherapist_Call {
	return &MockTherapistRepository_CreateTherapist_Call{Call: _e.mock.On("CreateTherapist", ctx, therapist)}
}

func (_c *MockTherapistRepository_CreateTherapist_Call) Run(run func(ctx context.Context, therapist *models.CreateTherapistInput)) *MockTherapistRepository_CreateTherapist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.CreateTherapistInput
		if args[1] != nil {
			arg1 = args[1].(*models.CreateTherapistInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTherapistRepository_CreateTherapist_Call) Return(therapist1 *models.Therapist, err error) *MockTherapistRepository_CreateTherapist_Call {
	_c.Call.Return(therapist1, err)
	return _c
}

func (_c *MockTherapistRepository_CreateTherapist_Call) RunAndReturn(run func(ctx context.Context, therapist *models.CreateTherapistInput) (*models.Therapist, error)) *MockTherapistRepository_CreateTherapist_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTherapist provides a mock function for the type MockTherapistRepository
func (_mock *MockTherapistRepository) DeleteTherapist(ctx context.Context, therapistID string) error {
	ret := _mock.Called(ctx, therapistID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTherapist")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, therapistID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTherapistRepository_DeleteTherapist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTherapist'
type MockTherapistRepository_DeleteTherapist_Call struct {
	*mock.Call
}

// DeleteTherapist is a helper method to define mock.On call
//   - ctx context.Context
//   - therapistID string
func (_e *MockTherapistRepository_Expecter) DeleteTherapist(ctx interface{}, therapistID interface{}) *MockTherapistRepository_DeleteTherapist_Call {
	return &MockTherapistRepository_DeleteTherapist_Call{Call: _e.mock.On("DeleteTherapist", ctx, therapistID)}
}

func (_c *MockTherapistRepository_DeleteTherapist_Call) Run(run func(ctx context.Context, therapistID string)) *MockTherapistRepository_DeleteTherapist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTherapistRepository_DeleteTherapist_Call) Return(err error) *MockTherapistRepository_DeleteTherapist_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTherapistRepository_DeleteTherapist_Call) RunAndReturn(run func(ctx context.Context, therapistID string) error) *MockTherapistRepository_DeleteTherapist_Call {
	_c.Call.Return(run)
	return _c
}

// GetTherapistByID provides a mock function for the type MockTherapistRepository
func (_mock *MockTherapistRepository) GetTherapistByID(ctx context.Context, therapistID string) (*models.Therapist, error) {
	ret := _mock.Called(ctx, therapistID)

	if len(ret) == 0 {
		panic("no return value specified for GetTherapistByID")
	}

	var r0 *models.Therapist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Therapist, error)); ok {
		return returnFunc(ctx, therapistID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Therapist); ok {
		r0 = returnFunc(ctx, therapistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Therapist)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, therapistID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTherapistRepository_GetTherapistByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTherapistByID'
type MockTherapistRepository_GetTherapistByID_Call struct {
	*mock.Call
}

// GetTherapistByID is a helper method to define mock.On call
//   - ctx context.Context
//   - therapistID string
func (_e *MockTherapistRepository_Expecter) GetTherapistByID(ctx interface{}, therapistID interface{}) *MockTherapistRepository_GetTherapistByID_Call {
	return &MockTherapistRepository_GetTherapistByID_Call{Call: _e.mock.On("GetTherapistByID", ctx, therapistID)}
}

func (_c *MockTherapistRepository_GetTherapistByID_Call) Run(run func(ctx context.Context, therapistID string)) *MockTherapistRepository_GetTherapistByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTherapistRepository_GetTherapistByID_Call) Return(therapist *models.Therapist, err error) *MockTherapistRepository_GetTherapistByID_Call {
	_c.Call.Return(therapist, err)
	return _c
}

func (_c *MockTherapistRepository_GetTherapistByID_Call) RunAndReturn(run func(ctx context.Context, therapistID string) (*models.Therapist, error)) *MockTherapistRepository_GetTherapistByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTherapists provides a mock function for the type MockTherapistRepository
func (_mock *MockTherapistRepository) GetTherapists(ctx context.Context, pagination utils.Pagination) ([]models.Therapist, error) {
	ret := _mock.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetTherapists")
	}

	var r0 []models.Therapist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, utils.Pagination) ([]models.Therapist, error)); ok {
		return returnFunc(ctx, pagination)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, utils.Pagination) []models.Therapist); ok {
		r0 = returnFunc(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Therapist)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, utils.Pagination) error); ok {
		r1 = returnFunc(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTherapistRepository_GetTherapists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTherapists'
type MockTherapistRepository_GetTherapists_Call struct {
	*mock.Call
}

// GetTherapists is a helper method to define mock.On call
//   - ctx context.Context
//   - pagination utils.Pagination
func (_e *MockTherapistRepository_Expecter) GetTherapists(ctx interface{}, pagination interface{}) *MockTherapistRepository_GetTherapists_Call {
	return &MockTherapistRepository_GetTherapists_Call{Call: _e.mock.On("GetTherapists", ctx, pagination)}
}

func (_c *MockTherapistRepository_GetTherapists_Call) Run(run func(ctx context.Context, pagination utils.Pagination)) *MockTherapistRepository_GetTherapists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 utils.Pagination
		if args[1] != nil {
			arg1 = args[1].(utils.Pagination)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTherapistRepository_GetTherapists_Call) Return(therapists []models.Therapist, err error) *MockTherapistRepository_GetTherapists_Call {
	_c.Call.Return(therapists, err)
	return _c
}

func (_c *MockTherapistRepository_GetTherapists_Call) RunAndReturn(run func(ctx context.Context, pagination utils.Pagination) ([]models.Therapist, error)) *MockTherapistRepository_GetTherapists_Call {
	_c.Call.Return(run)
	return _c
}

// PatchTherapist provides a mock function for the type MockTherapistRepository
func (_mock *MockTherapistRepository) PatchTherapist(ctx context.Context, therapistID string, updatedValue *models.UpdateTherapist) (*models.Therapist, error) {
	ret := _mock.Called(ctx, therapistID, updatedValue)

	if len(ret) == 0 {
		panic("no return value specified for PatchTherapist")
	}

	var r0 *models.Therapist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *models.UpdateTherapist) (*models.Therapist, error)); ok {
		return returnFunc(ctx, therapistID, updatedValue)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *models.UpdateTherapist) *models.Therapist); ok {
		r0 = returnFunc(ctx, therapistID, updatedValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Therapist)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *models.UpdateTherapist) error); ok {
		r1 = returnFunc(ctx, therapistID, updatedValue)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTherapistRepository_PatchTherapist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchTherapist'
type MockTherapistRepository_PatchTherapist_Call struct {
	*mock.Call
}

// PatchTherapist is a helper method to define mock.On call
//   - ctx context.Context
//   - therapistID string
//   - updatedValue *models.UpdateTherapist
func (_e *MockTherapistRepository_Expecter) PatchTherapist(ctx interface{}, therapistID interface{}, updatedValue interface{}) *MockTherapistRepository_PatchTherapist_Call {
	return &MockTherapistRepository_PatchTherapist_Call{Call: _e.mock.On("PatchTherapist", ctx, therapistID, updatedValue)}
}

func (_c *MockTherapistRepository_PatchTherapist_Call) Run(run func(ctx context.Context, therapistID string, updatedValue *models.UpdateTherapist)) *MockTherapistRepository_PatchTherapist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *models.UpdateTherapist
		if args[2] != nil {
			arg2 = args[2].(*models.UpdateTherapist)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTherapistRepository_PatchTherapist_Call) Return(therapist *models.Therapist, err error) *MockTherapistRepository_PatchTherapist_Call {
	_c.Call.Return(therapist, err)
	return _c
}

func (_c *MockTherapistRepository_PatchTherapist_Call) RunAndReturn(run func(ctx context.Context, therapistID string, updatedValue *models.UpdateTherapist) (*models.Therapist, error)) *MockTherapistRepository_PatchTherapist_Call {
	_c.Call.Return(run)
	return _c
}
