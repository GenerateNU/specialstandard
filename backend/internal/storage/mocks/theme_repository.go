// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"specialstandard/internal/models"
	"specialstandard/internal/utils"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockThemeRepository creates a new instance of MockThemeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockThemeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockThemeRepository {
	mock := &MockThemeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockThemeRepository is an autogenerated mock type for the ThemeRepository type
type MockThemeRepository struct {
	mock.Mock
}

type MockThemeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockThemeRepository) EXPECT() *MockThemeRepository_Expecter {
	return &MockThemeRepository_Expecter{mock: &_m.Mock}
}

// CreateTheme provides a mock function for the type MockThemeRepository
func (_mock *MockThemeRepository) CreateTheme(ctx context.Context, theme *models.CreateThemeInput) (*models.Theme, error) {
	ret := _mock.Called(ctx, theme)

	if len(ret) == 0 {
		panic("no return value specified for CreateTheme")
	}

	var r0 *models.Theme
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateThemeInput) (*models.Theme, error)); ok {
		return returnFunc(ctx, theme)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateThemeInput) *models.Theme); ok {
		r0 = returnFunc(ctx, theme)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Theme)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.CreateThemeInput) error); ok {
		r1 = returnFunc(ctx, theme)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockThemeRepository_CreateTheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTheme'
type MockThemeRepository_CreateTheme_Call struct {
	*mock.Call
}

// CreateTheme is a helper method to define mock.On call
//   - ctx context.Context
//   - theme *models.CreateThemeInput
func (_e *MockThemeRepository_Expecter) CreateTheme(ctx interface{}, theme interface{}) *MockThemeRepository_CreateTheme_Call {
	return &MockThemeRepository_CreateTheme_Call{Call: _e.mock.On("CreateTheme", ctx, theme)}
}

func (_c *MockThemeRepository_CreateTheme_Call) Run(run func(ctx context.Context, theme *models.CreateThemeInput)) *MockThemeRepository_CreateTheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.CreateThemeInput
		if args[1] != nil {
			arg1 = args[1].(*models.CreateThemeInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockThemeRepository_CreateTheme_Call) Return(theme1 *models.Theme, err error) *MockThemeRepository_CreateTheme_Call {
	_c.Call.Return(theme1, err)
	return _c
}

func (_c *MockThemeRepository_CreateTheme_Call) RunAndReturn(run func(ctx context.Context, theme *models.CreateThemeInput) (*models.Theme, error)) *MockThemeRepository_CreateTheme_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTheme provides a mock function for the type MockThemeRepository
func (_mock *MockThemeRepository) DeleteTheme(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTheme")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockThemeRepository_DeleteTheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTheme'
type MockThemeRepository_DeleteTheme_Call struct {
	*mock.Call
}

// DeleteTheme is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockThemeRepository_Expecter) DeleteTheme(ctx interface{}, id interface{}) *MockThemeRepository_DeleteTheme_Call {
	return &MockThemeRepository_DeleteTheme_Call{Call: _e.mock.On("DeleteTheme", ctx, id)}
}

func (_c *MockThemeRepository_DeleteTheme_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockThemeRepository_DeleteTheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockThemeRepository_DeleteTheme_Call) Return(err error) *MockThemeRepository_DeleteTheme_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockThemeRepository_DeleteTheme_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockThemeRepository_DeleteTheme_Call {
	_c.Call.Return(run)
	return _c
}

// GetThemeByID provides a mock function for the type MockThemeRepository
func (_mock *MockThemeRepository) GetThemeByID(ctx context.Context, id uuid.UUID) (*models.Theme, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetThemeByID")
	}

	var r0 *models.Theme
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Theme, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Theme); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Theme)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockThemeRepository_GetThemeByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThemeByID'
type MockThemeRepository_GetThemeByID_Call struct {
	*mock.Call
}

// GetThemeByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockThemeRepository_Expecter) GetThemeByID(ctx interface{}, id interface{}) *MockThemeRepository_GetThemeByID_Call {
	return &MockThemeRepository_GetThemeByID_Call{Call: _e.mock.On("GetThemeByID", ctx, id)}
}

func (_c *MockThemeRepository_GetThemeByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockThemeRepository_GetThemeByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockThemeRepository_GetThemeByID_Call) Return(theme *models.Theme, err error) *MockThemeRepository_GetThemeByID_Call {
	_c.Call.Return(theme, err)
	return _c
}

func (_c *MockThemeRepository_GetThemeByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.Theme, error)) *MockThemeRepository_GetThemeByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetThemes provides a mock function for the type MockThemeRepository
func (_mock *MockThemeRepository) GetThemes(ctx context.Context, pagination utils.Pagination, filter *models.ThemeFilter) ([]models.Theme, error) {
	ret := _mock.Called(ctx, pagination, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetThemes")
	}

	var r0 []models.Theme
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, utils.Pagination, *models.ThemeFilter) ([]models.Theme, error)); ok {
		return returnFunc(ctx, pagination, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, utils.Pagination, *models.ThemeFilter) []models.Theme); ok {
		r0 = returnFunc(ctx, pagination, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Theme)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, utils.Pagination, *models.ThemeFilter) error); ok {
		r1 = returnFunc(ctx, pagination, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockThemeRepository_GetThemes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThemes'
type MockThemeRepository_GetThemes_Call struct {
	*mock.Call
}

// GetThemes is a helper method to define mock.On call
//   - ctx context.Context
//   - pagination utils.Pagination
//   - filter *models.ThemeFilter
func (_e *MockThemeRepository_Expecter) GetThemes(ctx interface{}, pagination interface{}, filter interface{}) *MockThemeRepository_GetThemes_Call {
	return &MockThemeRepository_GetThemes_Call{Call: _e.mock.On("GetThemes", ctx, pagination, filter)}
}

func (_c *MockThemeRepository_GetThemes_Call) Run(run func(ctx context.Context, pagination utils.Pagination, filter *models.ThemeFilter)) *MockThemeRepository_GetThemes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 utils.Pagination
		if args[1] != nil {
			arg1 = args[1].(utils.Pagination)
		}
		var arg2 *models.ThemeFilter
		if args[2] != nil {
			arg2 = args[2].(*models.ThemeFilter)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockThemeRepository_GetThemes_Call) Return(themes []models.Theme, err error) *MockThemeRepository_GetThemes_Call {
	_c.Call.Return(themes, err)
	return _c
}

func (_c *MockThemeRepository_GetThemes_Call) RunAndReturn(run func(ctx context.Context, pagination utils.Pagination, filter *models.ThemeFilter) ([]models.Theme, error)) *MockThemeRepository_GetThemes_Call {
	_c.Call.Return(run)
	return _c
}

// PatchTheme provides a mock function for the type MockThemeRepository
func (_mock *MockThemeRepository) PatchTheme(ctx context.Context, id uuid.UUID, theme *models.UpdateThemeInput) (*models.Theme, error) {
	ret := _mock.Called(ctx, id, theme)

	if len(ret) == 0 {
		panic("no return value specified for PatchTheme")
	}

	var r0 *models.Theme
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.UpdateThemeInput) (*models.Theme, error)); ok {
		return returnFunc(ctx, id, theme)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.UpdateThemeInput) *models.Theme); ok {
		r0 = returnFunc(ctx, id, theme)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Theme)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.UpdateThemeInput) error); ok {
		r1 = returnFunc(ctx, id, theme)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockThemeRepository_PatchTheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchTheme'
type MockThemeRepository_PatchTheme_Call struct {
	*mock.Call
}

// PatchTheme is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - theme *models.UpdateThemeInput
func (_e *MockThemeRepository_Expecter) PatchTheme(ctx interface{}, id interface{}, theme interface{}) *MockThemeRepository_PatchTheme_Call {
	return &MockThemeRepository_PatchTheme_Call{Call: _e.mock.On("PatchTheme", ctx, id, theme)}
}

func (_c *MockThemeRepository_PatchTheme_Call) Run(run func(ctx context.Context, id uuid.UUID, theme *models.UpdateThemeInput)) *MockThemeRepository_PatchTheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *models.UpdateThemeInput
		if args[2] != nil {
			arg2 = args[2].(*models.UpdateThemeInput)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockThemeRepository_PatchTheme_Call) Return(theme1 *models.Theme, err error) *MockThemeRepository_PatchTheme_Call {
	_c.Call.Return(theme1, err)
	return _c
}

func (_c *MockThemeRepository_PatchTheme_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, theme *models.UpdateThemeInput) (*models.Theme, error)) *MockThemeRepository_PatchTheme_Call {
	_c.Call.Return(run)
	return _c
}
