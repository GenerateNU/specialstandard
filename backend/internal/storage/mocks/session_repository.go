// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"specialstandard/internal/models"
	"specialstandard/internal/utils"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionRepository creates a new instance of MockSessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionRepository {
	mock := &MockSessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionRepository is an autogenerated mock type for the SessionRepository type
type MockSessionRepository struct {
	mock.Mock
}

type MockSessionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionRepository) EXPECT() *MockSessionRepository_Expecter {
	return &MockSessionRepository_Expecter{mock: &_m.Mock}
}

// DeleteSession provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) DeleteSession(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionRepository_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type MockSessionRepository_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSessionRepository_Expecter) DeleteSession(ctx interface{}, id interface{}) *MockSessionRepository_DeleteSession_Call {
	return &MockSessionRepository_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, id)}
}

func (_c *MockSessionRepository_DeleteSession_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSessionRepository_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionRepository_DeleteSession_Call) Return(err error) *MockSessionRepository_DeleteSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionRepository_DeleteSession_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockSessionRepository_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionByID provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) GetSessionByID(ctx context.Context, id string) (*models.Session, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionByID")
	}

	var r0 *models.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Session, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Session); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRepository_GetSessionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionByID'
type MockSessionRepository_GetSessionByID_Call struct {
	*mock.Call
}

// GetSessionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockSessionRepository_Expecter) GetSessionByID(ctx interface{}, id interface{}) *MockSessionRepository_GetSessionByID_Call {
	return &MockSessionRepository_GetSessionByID_Call{Call: _e.mock.On("GetSessionByID", ctx, id)}
}

func (_c *MockSessionRepository_GetSessionByID_Call) Run(run func(ctx context.Context, id string)) *MockSessionRepository_GetSessionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionRepository_GetSessionByID_Call) Return(session *models.Session, err error) *MockSessionRepository_GetSessionByID_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionRepository_GetSessionByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*models.Session, error)) *MockSessionRepository_GetSessionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionStudents provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) GetSessionStudents(ctx context.Context, sessionID uuid.UUID, pagination utils.Pagination) ([]models.SessionStudentsOutput, error) {
	ret := _mock.Called(ctx, sessionID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionStudents")
	}

	var r0 []models.SessionStudentsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, utils.Pagination) ([]models.SessionStudentsOutput, error)); ok {
		return returnFunc(ctx, sessionID, pagination)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, utils.Pagination) []models.SessionStudentsOutput); ok {
		r0 = returnFunc(ctx, sessionID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SessionStudentsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, utils.Pagination) error); ok {
		r1 = returnFunc(ctx, sessionID, pagination)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRepository_GetSessionStudents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionStudents'
type MockSessionRepository_GetSessionStudents_Call struct {
	*mock.Call
}

// GetSessionStudents is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
//   - pagination utils.Pagination
func (_e *MockSessionRepository_Expecter) GetSessionStudents(ctx interface{}, sessionID interface{}, pagination interface{}) *MockSessionRepository_GetSessionStudents_Call {
	return &MockSessionRepository_GetSessionStudents_Call{Call: _e.mock.On("GetSessionStudents", ctx, sessionID, pagination)}
}

func (_c *MockSessionRepository_GetSessionStudents_Call) Run(run func(ctx context.Context, sessionID uuid.UUID, pagination utils.Pagination)) *MockSessionRepository_GetSessionStudents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 utils.Pagination
		if args[2] != nil {
			arg2 = args[2].(utils.Pagination)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionRepository_GetSessionStudents_Call) Return(sessionStudentsOutputs []models.SessionStudentsOutput, err error) *MockSessionRepository_GetSessionStudents_Call {
	_c.Call.Return(sessionStudentsOutputs, err)
	return _c
}

func (_c *MockSessionRepository_GetSessionStudents_Call) RunAndReturn(run func(ctx context.Context, sessionID uuid.UUID, pagination utils.Pagination) ([]models.SessionStudentsOutput, error)) *MockSessionRepository_GetSessionStudents_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessions provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) GetSessions(ctx context.Context, pagination utils.Pagination, filter *models.GetSessionRepositoryRequest) ([]models.Session, error) {
	ret := _mock.Called(ctx, pagination, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetSessions")
	}

	var r0 []models.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, utils.Pagination, *models.GetSessionRepositoryRequest) ([]models.Session, error)); ok {
		return returnFunc(ctx, pagination, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, utils.Pagination, *models.GetSessionRepositoryRequest) []models.Session); ok {
		r0 = returnFunc(ctx, pagination, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, utils.Pagination, *models.GetSessionRepositoryRequest) error); ok {
		r1 = returnFunc(ctx, pagination, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRepository_GetSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessions'
type MockSessionRepository_GetSessions_Call struct {
	*mock.Call
}

// GetSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - pagination utils.Pagination
//   - filter *models.GetSessionRepositoryRequest
func (_e *MockSessionRepository_Expecter) GetSessions(ctx interface{}, pagination interface{}, filter interface{}) *MockSessionRepository_GetSessions_Call {
	return &MockSessionRepository_GetSessions_Call{Call: _e.mock.On("GetSessions", ctx, pagination, filter)}
}

func (_c *MockSessionRepository_GetSessions_Call) Run(run func(ctx context.Context, pagination utils.Pagination, filter *models.GetSessionRepositoryRequest)) *MockSessionRepository_GetSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 utils.Pagination
		if args[1] != nil {
			arg1 = args[1].(utils.Pagination)
		}
		var arg2 *models.GetSessionRepositoryRequest
		if args[2] != nil {
			arg2 = args[2].(*models.GetSessionRepositoryRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionRepository_GetSessions_Call) Return(sessions []models.Session, err error) *MockSessionRepository_GetSessions_Call {
	_c.Call.Return(sessions, err)
	return _c
}

func (_c *MockSessionRepository_GetSessions_Call) RunAndReturn(run func(ctx context.Context, pagination utils.Pagination, filter *models.GetSessionRepositoryRequest) ([]models.Session, error)) *MockSessionRepository_GetSessions_Call {
	_c.Call.Return(run)
	return _c
}

// PatchSession provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) PatchSession(ctx context.Context, id uuid.UUID, session *models.PatchSessionInput) (*models.Session, error) {
	ret := _mock.Called(ctx, id, session)

	if len(ret) == 0 {
		panic("no return value specified for PatchSession")
	}

	var r0 *models.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.PatchSessionInput) (*models.Session, error)); ok {
		return returnFunc(ctx, id, session)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.PatchSessionInput) *models.Session); ok {
		r0 = returnFunc(ctx, id, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.PatchSessionInput) error); ok {
		r1 = returnFunc(ctx, id, session)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRepository_PatchSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchSession'
type MockSessionRepository_PatchSession_Call struct {
	*mock.Call
}

// PatchSession is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - session *models.PatchSessionInput
func (_e *MockSessionRepository_Expecter) PatchSession(ctx interface{}, id interface{}, session interface{}) *MockSessionRepository_PatchSession_Call {
	return &MockSessionRepository_PatchSession_Call{Call: _e.mock.On("PatchSession", ctx, id, session)}
}

func (_c *MockSessionRepository_PatchSession_Call) Run(run func(ctx context.Context, id uuid.UUID, session *models.PatchSessionInput)) *MockSessionRepository_PatchSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *models.PatchSessionInput
		if args[2] != nil {
			arg2 = args[2].(*models.PatchSessionInput)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionRepository_PatchSession_Call) Return(session1 *models.Session, err error) *MockSessionRepository_PatchSession_Call {
	_c.Call.Return(session1, err)
	return _c
}

func (_c *MockSessionRepository_PatchSession_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, session *models.PatchSessionInput) (*models.Session, error)) *MockSessionRepository_PatchSession_Call {
	_c.Call.Return(run)
	return _c
}

// PostSession provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) PostSession(ctx context.Context, session *models.PostSessionInput) (*models.Session, error) {
	ret := _mock.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for PostSession")
	}

	var r0 *models.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.PostSessionInput) (*models.Session, error)); ok {
		return returnFunc(ctx, session)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.PostSessionInput) *models.Session); ok {
		r0 = returnFunc(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.PostSessionInput) error); ok {
		r1 = returnFunc(ctx, session)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRepository_PostSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSession'
type MockSessionRepository_PostSession_Call struct {
	*mock.Call
}

// PostSession is a helper method to define mock.On call
//   - ctx context.Context
//   - session *models.PostSessionInput
func (_e *MockSessionRepository_Expecter) PostSession(ctx interface{}, session interface{}) *MockSessionRepository_PostSession_Call {
	return &MockSessionRepository_PostSession_Call{Call: _e.mock.On("PostSession", ctx, session)}
}

func (_c *MockSessionRepository_PostSession_Call) Run(run func(ctx context.Context, session *models.PostSessionInput)) *MockSessionRepository_PostSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.PostSessionInput
		if args[1] != nil {
			arg1 = args[1].(*models.PostSessionInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionRepository_PostSession_Call) Return(session1 *models.Session, err error) *MockSessionRepository_PostSession_Call {
	_c.Call.Return(session1, err)
	return _c
}

func (_c *MockSessionRepository_PostSession_Call) RunAndReturn(run func(ctx context.Context, session *models.PostSessionInput) (*models.Session, error)) *MockSessionRepository_PostSession_Call {
	_c.Call.Return(run)
	return _c
}
