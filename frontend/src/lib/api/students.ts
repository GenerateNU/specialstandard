/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * The Special Standard API
 * OpenAPI spec version: 0.1.0
 */
import type {
  CreateStudentInput,
  GetStudentsParams,
  GetStudentsStudentIdSessionsParams,
  PatchStudentsPromote200,
  PromoteStudentsInput,
  SessionWithStudentInfo,
  Student,
  UpdateStudentInput,
} from "./theSpecialStandardAPI.schemas";

import { customAxios } from "./apiClient";

export const getStudents = () => {
  /**
   * Retrieve a paginated list of students with optional filtering by grade, therapist, and name
   * @summary Get all students
   */
  const getStudents = (params?: GetStudentsParams) => {
    return customAxios<Student[]>({ url: `/students`, method: "GET", params });
  };
  /**
   * Create a new student record
   * @summary Create a new student
   */
  const postStudents = (createStudentInput: CreateStudentInput) => {
    return customAxios<Student>({
      url: `/students`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createStudentInput,
    });
  };
  /**
   * Retrieve a specific student by their ID
   * @summary Get student by ID
   */
  const getStudentsId = (id: string) => {
    return customAxios<Student>({ url: `/students/${id}`, method: "GET" });
  };
  /**
   * Update an existing student's information (partial update)
   * @summary Update student
   */
  const patchStudentsId = (
    id: string,
    updateStudentInput: UpdateStudentInput,
  ) => {
    return customAxios<Student>({
      url: `/students/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateStudentInput,
    });
  };
  /**
   * Delete a student record
   * @summary Delete student
   */
  const deleteStudentsId = (id: string) => {
    return customAxios<void>({ url: `/students/${id}`, method: "DELETE" });
  };
  /**
 * Retrieve all sessions associated with a specific student, including bridge table information.

**Date Filtering Options:**
- Use `startDate` and `endDate` for date range filtering: `?startDate=2025-09-01&endDate=2025-09-30`
- Use `month` and `year` for monthly filtering: `?month=9&year=2025`  
- Use `year` alone for yearly filtering: `?year=2025`

**Attendance Filtering:**
- Use `present` to filter by attendance: `?present=true` or `?present=false`

**Combining Filters:**
All filters can be combined: `?month=9&year=2025&present=true`

 * @summary Get all sessions for a student
 */
  const getStudentsStudentIdSessions = (
    studentId: string,
    params?: GetStudentsStudentIdSessionsParams,
  ) => {
    return customAxios<SessionWithStudentInfo[]>({
      url: `/students/${studentId}/sessions`,
      method: "GET",
      params,
    });
  };
  /**
   * Promotes all of a therapist's students other than the ones that are not moving up.
   * @summary Promotes all of a therapist's students
   */
  const patchStudentsPromote = (promoteStudentsInput: PromoteStudentsInput) => {
    return customAxios<PatchStudentsPromote200>({
      url: `/students/promote`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: promoteStudentsInput,
    });
  };
  return {
    getStudents,
    postStudents,
    getStudentsId,
    patchStudentsId,
    deleteStudentsId,
    getStudentsStudentIdSessions,
    patchStudentsPromote,
  };
};
export type GetStudentsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getStudents>["getStudents"]>>
>;
export type PostStudentsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getStudents>["postStudents"]>>
>;
export type GetStudentsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getStudents>["getStudentsId"]>>
>;
export type PatchStudentsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getStudents>["patchStudentsId"]>>
>;
export type DeleteStudentsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getStudents>["deleteStudentsId"]>>
>;
export type GetStudentsStudentIdSessionsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getStudents>["getStudentsStudentIdSessions"]>
  >
>;
export type PatchStudentsPromoteResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getStudents>["patchStudentsPromote"]>>
>;
