/**
 * Generated by orval v7.13.1 🍺
 * Do not edit manually.
 * The Special Standard API
 * OpenAPI spec version: 0.1.0
 */
import type {
  DeleteSessionsId200,
  GetSessionsIdResourcesParams,
  GetSessionsParams,
  GetSessionsSessionIdStudentsParams,
  PostSessionsBody,
  Resource,
  Session,
  StudentWithSessionInfo,
  UpdateSessionInput,
} from "./theSpecialStandardAPI.schemas";

import { customAxios } from "./apiClient";

export const getSessions = () => {
  /**
   * Retrieve all therapy sessions from the database with optional filtering
   * @summary Get all sessions
   */
  const getSessions = (params?: GetSessionsParams) => {
    return customAxios<Session[]>({ url: `/sessions`, method: "GET", params });
  };
  /**
   * Create a new therapy session
   * @summary Create a new session
   */
  const postSessions = (postSessionsBody: PostSessionsBody) => {
    return customAxios<Session>({
      url: `/sessions`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postSessionsBody,
    });
  };
  /**
   * Retrieve a specific therapy session by its UUID
   * @summary Get session by ID
   */
  const getSessionsId = (id: string) => {
    return customAxios<Session>({ url: `/sessions/${id}`, method: "GET" });
  };
  /**
   * Update an existing session (partial update)
   * @summary Update session
   */
  const patchSessionsId = (
    id: string,
    updateSessionInput: UpdateSessionInput,
  ) => {
    return customAxios<Session>({
      url: `/sessions/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateSessionInput,
    });
  };
  /**
   * Delete a session from the database
   * @summary Delete session
   */
  const deleteSessionsId = (id: string) => {
    return customAxios<DeleteSessionsId200>({
      url: `/sessions/${id}`,
      method: "DELETE",
    });
  };
  /**
   * Retrieve all resources associated with a specific session
   * @summary Get resources for a session
   */
  const getSessionsIdResources = (
    id: string,
    params?: GetSessionsIdResourcesParams,
  ) => {
    return customAxios<Resource[]>({
      url: `/sessions/${id}/resources`,
      method: "GET",
      params,
    });
  };
  /**
   * Retrieve all students associated with a specific session, including bridge table information
   * @summary Get all students for a session
   */
  const getSessionsSessionIdStudents = (
    sessionId: string,
    params?: GetSessionsSessionIdStudentsParams,
  ) => {
    return customAxios<StudentWithSessionInfo[]>({
      url: `/sessions/${sessionId}/students`,
      method: "GET",
      params,
    });
  };
  return {
    getSessions,
    postSessions,
    getSessionsId,
    patchSessionsId,
    deleteSessionsId,
    getSessionsIdResources,
    getSessionsSessionIdStudents,
  };
};
export type GetSessionsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["getSessions"]>>
>;
export type PostSessionsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["postSessions"]>>
>;
export type GetSessionsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["getSessionsId"]>>
>;
export type PatchSessionsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["patchSessionsId"]>>
>;
export type DeleteSessionsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["deleteSessionsId"]>>
>;
export type GetSessionsIdResourcesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["getSessionsIdResources"]>>
>;
export type GetSessionsSessionIdStudentsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSessions>["getSessionsSessionIdStudents"]>
  >
>;
