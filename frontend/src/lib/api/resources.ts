/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * The Special Standard API
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateResourceBody,
  Error,
  GetResourcesParams,
  Resource,
  UpdateResourceBody
} from './api.schemas';






/**
 * Retrieve all resources from the database
 * @summary Get all resources
 */
export const getResources = (
    params?: GetResourcesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Resource[]>> => {
    
    
    return axios.get(
      `/resources`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }




export const getGetResourcesQueryKey = (params?: GetResourcesParams,) => {
    return [
    `/resources`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetResourcesQueryOptions = <TData = Awaited<ReturnType<typeof getResources>>, TError = AxiosError<Error | Error>>(params?: GetResourcesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetResourcesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getResources>>> = ({ signal }) => getResources(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetResourcesQueryResult = NonNullable<Awaited<ReturnType<typeof getResources>>>
export type GetResourcesQueryError = AxiosError<Error | Error>


export function useGetResources<TData = Awaited<ReturnType<typeof getResources>>, TError = AxiosError<Error | Error>>(
 params: undefined |  GetResourcesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResources>>,
          TError,
          Awaited<ReturnType<typeof getResources>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResources<TData = Awaited<ReturnType<typeof getResources>>, TError = AxiosError<Error | Error>>(
 params?: GetResourcesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResources>>,
          TError,
          Awaited<ReturnType<typeof getResources>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResources<TData = Awaited<ReturnType<typeof getResources>>, TError = AxiosError<Error | Error>>(
 params?: GetResourcesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all resources
 */

export function useGetResources<TData = Awaited<ReturnType<typeof getResources>>, TError = AxiosError<Error | Error>>(
 params?: GetResourcesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetResourcesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new resource in the database
 * @summary Create a new resource
 */
export const postResources = (
    createResourceBody: CreateResourceBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Resource>> => {
    
    
    return axios.post(
      `/resources`,
      createResourceBody,options
    );
  }



export const getPostResourcesMutationOptions = <TError = AxiosError<Error | Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postResources>>, TError,{data: CreateResourceBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postResources>>, TError,{data: CreateResourceBody}, TContext> => {

const mutationKey = ['postResources'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postResources>>, {data: CreateResourceBody}> = (props) => {
          const {data} = props ?? {};

          return  postResources(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostResourcesMutationResult = NonNullable<Awaited<ReturnType<typeof postResources>>>
    export type PostResourcesMutationBody = CreateResourceBody
    export type PostResourcesMutationError = AxiosError<Error | Error>

    /**
 * @summary Create a new resource
 */
export const usePostResources = <TError = AxiosError<Error | Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postResources>>, TError,{data: CreateResourceBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postResources>>,
        TError,
        {data: CreateResourceBody},
        TContext
      > => {

      const mutationOptions = getPostResourcesMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retrieve a specific resource by its ID
 * @summary Get resource by ID
 */
export const getResourcesId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Resource>> => {
    
    
    return axios.get(
      `/resources/${id}`,options
    );
  }




export const getGetResourcesIdQueryKey = (id?: string,) => {
    return [
    `/resources/${id}`
    ] as const;
    }

    
export const getGetResourcesIdQueryOptions = <TData = Awaited<ReturnType<typeof getResourcesId>>, TError = AxiosError<Error | Error>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResourcesId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetResourcesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getResourcesId>>> = ({ signal }) => getResourcesId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getResourcesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetResourcesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getResourcesId>>>
export type GetResourcesIdQueryError = AxiosError<Error | Error>


export function useGetResourcesId<TData = Awaited<ReturnType<typeof getResourcesId>>, TError = AxiosError<Error | Error>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResourcesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResourcesId>>,
          TError,
          Awaited<ReturnType<typeof getResourcesId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResourcesId<TData = Awaited<ReturnType<typeof getResourcesId>>, TError = AxiosError<Error | Error>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResourcesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResourcesId>>,
          TError,
          Awaited<ReturnType<typeof getResourcesId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResourcesId<TData = Awaited<ReturnType<typeof getResourcesId>>, TError = AxiosError<Error | Error>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResourcesId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get resource by ID
 */

export function useGetResourcesId<TData = Awaited<ReturnType<typeof getResourcesId>>, TError = AxiosError<Error | Error>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResourcesId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetResourcesIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an existing resource in the database
 * @summary Update a resource
 */
export const patchResourcesId = (
    id: string,
    updateResourceBody: UpdateResourceBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Resource>> => {
    
    
    return axios.patch(
      `/resources/${id}`,
      updateResourceBody,options
    );
  }



export const getPatchResourcesIdMutationOptions = <TError = AxiosError<Error | Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchResourcesId>>, TError,{id: string;data: UpdateResourceBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchResourcesId>>, TError,{id: string;data: UpdateResourceBody}, TContext> => {

const mutationKey = ['patchResourcesId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchResourcesId>>, {id: string;data: UpdateResourceBody}> = (props) => {
          const {id,data} = props ?? {};

          return  patchResourcesId(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchResourcesIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchResourcesId>>>
    export type PatchResourcesIdMutationBody = UpdateResourceBody
    export type PatchResourcesIdMutationError = AxiosError<Error | Error>

    /**
 * @summary Update a resource
 */
export const usePatchResourcesId = <TError = AxiosError<Error | Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchResourcesId>>, TError,{id: string;data: UpdateResourceBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchResourcesId>>,
        TError,
        {id: string;data: UpdateResourceBody},
        TContext
      > => {

      const mutationOptions = getPatchResourcesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Delete an existing resource from the database
 * @summary Delete a resource
 */
export const deleteResourcesId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/resources/${id}`,options
    );
  }



export const getDeleteResourcesIdMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteResourcesId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteResourcesId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteResourcesId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteResourcesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteResourcesId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteResourcesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteResourcesId>>>
    
    export type DeleteResourcesIdMutationError = AxiosError<Error>

    /**
 * @summary Delete a resource
 */
export const useDeleteResourcesId = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteResourcesId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteResourcesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteResourcesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    