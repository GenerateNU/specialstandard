import * as React from 'react'
import { cn } from '@/lib/utils'

// Avatar container component with auto-generation support
const Avatar = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & {
    name?: string
    variant?: 'avataaars' | 'lorelei' | 'micah' | 'miniavs' | 'big-smile' | 'personas'
  }
>(({ className, name, variant = 'avataaars', children, ...props }, ref) => {
  // If no children and name is provided, auto-generate avatar
  const shouldAutoGenerate = !children && name

  return (
    <div
      ref={ref}
      className={cn(
        'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',
        className,
      )}
      {...props}
    >
      {shouldAutoGenerate
        ? (
            <AvatarAutoGenerated name={name} variant={variant} />
          )
        : (
            children
          )}
    </div>
  )
})
Avatar.displayName = 'Avatar'

const AvatarFallback = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'flex h-full w-full items-center justify-center rounded-full bg-muted text-xs font-medium',
      className,
    )}
    {...props}
  />
))
AvatarFallback.displayName = 'AvatarFallback'

// Auto-generated avatar component
function AvatarAutoGenerated({ name, variant }: { name: string, variant: string }) {
  const [error, setError] = React.useState(false)
  const [loading, setLoading] = React.useState(true)

  const avatarUrl = `https://api.dicebear.com/7.x/${variant}/svg?seed=${encodeURIComponent(name)}`

  if (error) {
    return (
      <AvatarFallback>
        {getInitials(name)}
      </AvatarFallback>
    )
  }

  return (
    <>
      {loading && (
        <AvatarFallback className="animate-pulse">
          {getInitials(name)}
        </AvatarFallback>
      )}
      <img
        src={avatarUrl}
        alt={name}
        className={cn('h-full w-full object-cover', loading && 'opacity-0')}
        onLoad={() => setLoading(false)}
        onError={() => {
          setError(true)
          setLoading(false)
        }}
      />
    </>
  )
}

// Extract initials from a string
function getInitials(name: string): string {
  const cleaned = name.trim()
  const words = cleaned.split(/\s+/)

  if (words.length >= 2) {
    return `${words[0][0]}${words[words.length - 1][0]}`.toUpperCase()
  }

  return cleaned.slice(0, 2).toUpperCase() || '?'
}

const AvatarImage = React.forwardRef<
  HTMLImageElement,
  React.ImgHTMLAttributes<HTMLImageElement>
>(({ className, ...props }, ref) => (
  <img
    ref={ref}
    className={cn('aspect-square h-full w-full object-cover', className)}
    {...props}
  />
))
AvatarImage.displayName = 'AvatarImage'

export { Avatar, AvatarFallback, AvatarImage }
